<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lwl.backendmanager.authority.dao.MRoleDao">
  <resultMap id="BaseResultMap" type="com.lwl.backendmanager.authority.bean.DO.MRole">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="role_id" jdbcType="VARCHAR" property="roleId" />
    <result column="role_name" jdbcType="VARCHAR" property="roleName" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="creater" jdbcType="VARCHAR" property="creater" />
    <result column="status" jdbcType="BIT" property="status" />
  </resultMap>
  <sql id="Base_Column_List">
    id, role_id, role_name, create_time, creater,`status`
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from m_role
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByparam" parameterType="com.lwl.backendmanager.authority.bean.DO.MRole" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from m_role
    where `status` = 0
    <if test="roleId != null">
      and role_id = #{roleId,jdbcType=VARCHAR}
    </if>
    <if test="roleName != null">
      and role_name = #{roleName,jdbcType=VARCHAR}
    </if>

  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from m_role
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.lwl.backendmanager.authority.bean.DO.MRole" useGeneratedKeys="true">
    insert into m_role (role_id, role_name, create_time, 
      creater)
    values (#{roleId,jdbcType=VARCHAR}, #{roleName,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{creater,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.lwl.backendmanager.authority.bean.DO.MRole" useGeneratedKeys="true">
    insert into m_role
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="roleId != null">
        role_id,
      </if>
      <if test="roleName != null">
        role_name,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="creater != null">
        creater,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="roleId != null">
        #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="roleName != null">
        #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="creater != null">
        #{creater,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lwl.backendmanager.authority.bean.DO.MRole">
    update m_role
    <set>
      <if test="roleName != null">
        role_name = #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="creater != null">
        creater = #{creater,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=VARCHAR},
      </if>
    </set>
    where role_id = #{roleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lwl.backendmanager.authority.bean.DO.MRole">
    update m_role
    set
      role_name = #{roleName,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      creater = #{creater,jdbcType=VARCHAR}
    where role_id = #{roleId,jdbcType=VARCHAR}
  </update>
  
  <update id="batchDelete" parameterType="list">
    <foreach collection="roles" index="index" separator=";" item="role">
      update m_role set `status` = 1 where role_id = #{role.roleId,jdbcType=VARCHAR}
    </foreach>
  </update>

  <!--角色资源关系表-->
  <insert id="saveRoleResource">
    insert into m_role_resource (role_id,resource_id) values
    <foreach collection="resources" separator="," item="resource" index="index" >
      (#{roleId}, #{resource.resourceId})
    </foreach>
  </insert>
  <delete id="deleteRoleResource" parameterType="String">
    delete from m_role_resource where role_id = #{roleId}
  </delete>
</mapper>